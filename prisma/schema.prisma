// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// schema.prisma
enum Role {
  USER
  ADMIN
}



model User {
  id                  String    @id @default(cuid()) @map("_id")
  name                String?
  email               String    @unique
  password            String?
  role                Role      @default(USER)
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  resetPasswordToken  String?   // Remove the @unique attribute here
  resetPasswordExpiry DateTime?
  orders              Order[]
  reviews             Review[]

  // Use a single relation with a specific name
  passwordResets      PasswordReset[] @relation("UserToPasswordResets")

  PaymentIntent PaymentIntent[]
}



model Category {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  image       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  products    Product[]
}

model Product {
  id          String    @id @default(cuid()) @map("_id")
  name        String
  description String
  price       Float
  stock       Int       @default(0)
  images      String[]
  categoryId  String    @db.ObjectId
  category    Category  @relation(fields: [categoryId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  orderItems  OrderItem[]
  reviews     Review[]
}

model PasswordReset {
  id        String    @id @default(cuid()) @map("_id")
  token     String    @unique
  expires   DateTime
  userId    String
  user      User      @relation("UserToPasswordResets", fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime  @default(now())
}

model Order {
  id    String    @id @default(cuid()) @map("_id")
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  total    Float
  status    String    @default("PENDING")
  paymentStatus String    @default("PENDING")
  paymentMethod String
  shippingAddress String
  email    String?    // Add this field for guest checkout
  userId    String?
  user    User?    @relation(fields: [userId], references: [id])
  items    OrderItem[]
  metadata Json?
}

model OrderItem {
  id    String  @id @default(auto()) @map("_id") @db.ObjectId
  orderId   String  @db.ObjectId
  order    Order   @relation(fields: [orderId], references: [id])
  productId String  @db.ObjectId
  product   Product @relation(fields: [productId], references: [id])
  quantity  Int
  price    Float
}

model Review {
  id    String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  user    User    @relation(fields: [userId], references: [id])
  productId String   @db.ObjectId
  product   Product  @relation(fields: [productId], references: [id])
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PaymentIntent {
  id          String   @id @default(cuid()) @map("_id")
  paymentId   String   @unique
  amount      Float
  status      String
  userId      String?
  user        User?    @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}